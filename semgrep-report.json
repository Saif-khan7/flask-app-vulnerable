{"errors": [{"code": 3, "level": "warn", "message": "Syntax error at line semgrep-report.json:1:\n missing element", "path": "semgrep-report.json", "type": "Syntax error"}], "interfile_languages_used": [], "paths": {"scanned": [".github/workflows/security_pipeline.yml", "app_vulnerable.py", "bandit-report.json", "database.db", "requirements.txt", "semgrep-report.json", "tempCodeRunnerFile.py", "uploads/2024-11-14-ZAP-Report-.pdf"]}, "results": [{"check_id": "python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG", "end": {"col": 27, "line": 8, "offset": 237}, "extra": {"engine_kind": "OSS", "fingerprint": "93682db27e2690b75ece882e4b4bb337e005f37a535f28da283d5757b8b832209abb0ab4ff2dc2293b923b84e61155cd1561389942b65c17dc7ef08bd2ba8bba_0", "is_ignored": false, "lines": "app.config['DEBUG'] = True  # Insecure: Debug mode enabled", "message": "Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment variable", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-489: Active Debug Code"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration"], "references": ["https://bento.dev/checks/flask/avoid-hardcoded-config/", "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values", "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9539, "rule_id": "JDUyJR", "rv_id": 834478, "url": "https://semgrep.dev/playground/r/pZTXD1A/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG", "version_id": "pZTXD1A"}}, "shortlink": "https://sg.run/LwPo", "source": "https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG", "subcategory": ["audit"], "technology": ["flask"], "vulnerability_class": ["Active Debug Code"]}, "metavars": {"$M": {"abstract_content": "app", "end": {"col": 4, "line": 8, "offset": 214}, "propagated_value": {"svalue_abstract_content": "Flask(__name__)", "svalue_end": {"col": 22, "line": 7, "offset": 210}, "svalue_start": {"col": 7, "line": 7, "offset": 195}}, "start": {"col": 1, "line": 8, "offset": 211}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "app_vulnerable.py", "start": {"col": 1, "line": 8, "offset": 211}}, {"check_id": "python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY", "end": {"col": 44, "line": 9, "offset": 313}, "extra": {"engine_kind": "OSS", "fingerprint": "8d8a4aefef2eeb442c61d59b2c7c3a94af7c9861da1e527523126574841c0f940bd32c63975620a3ea414e6bd5ff9f09989b2b60b6aa2caf2192eac871341086_0", "is_ignored": false, "lines": "app.config['SECRET_KEY'] = 'supersecretkey'  # Hardcoded secret key (Insecure)", "message": "Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-489: Active Debug Code"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration"], "references": ["https://bento.dev/checks/flask/avoid-hardcoded-config/", "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values", "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9537, "rule_id": "4bUkX0", "rv_id": 834476, "url": "https://semgrep.dev/playground/r/o5TB1gL/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY", "version_id": "o5TB1gL"}}, "shortlink": "https://sg.run/Ekde", "source": "https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY", "subcategory": ["audit"], "technology": ["flask"], "vulnerability_class": ["Active Debug Code"]}, "metavars": {"$M": {"abstract_content": "app", "end": {"col": 4, "line": 9, "offset": 273}, "start": {"col": 1, "line": 9, "offset": 270}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "app_vulnerable.py", "start": {"col": 1, "line": 9, "offset": 270}}, {"check_id": "python.flask.security.audit.render-template-string.render-template-string", "end": {"col": 22, "line": 53, "offset": 1534}, "extra": {"engine_kind": "OSS", "fingerprint": "ae48ff0c8a35e55df8c26511caab7f6f778e9a697ed25952de7443d975df0b5d4d174b549f6ee0bdd3fbc2eb6a8226fde01e662e2bdcc1d7b4135ff6b4ce9179_0", "is_ignored": false, "lines": "    return render_template_string('''\n        <h1>User List</h1>\n        <form action=\"/add\" method=\"post\">\n            Username: <input type=\"text\" name=\"username\"><br>\n            Email: <input type=\"text\" name=\"email\"><br>\n            <input type=\"submit\" value=\"Add User\">\n        </form>\n        <h2>Users:</h2>\n        <ul>\n            {% for user in users %}\n                <li>{{ user[1] }} - {{ user[2] }}</li>\n            {% endfor %}\n        </ul>\n    ''', users=users)", "message": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9540, "rule_id": "5rUOv1", "rv_id": 834480, "url": "https://semgrep.dev/playground/r/X0T5KQJ/python.flask.security.audit.render-template-string.render-template-string", "version_id": "X0T5KQJ"}}, "shortlink": "https://sg.run/8yjE", "source": "https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string", "subcategory": ["audit"], "technology": ["flask"], "vulnerability_class": ["Code Injection"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "app_vulnerable.py", "start": {"col": 12, "line": 40, "offset": 1064}}, {"check_id": "python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute", "end": {"col": 92, "line": 62, "offset": 1846}, "extra": {"engine_kind": "OSS", "fingerprint": "6720e0de5fe8b1fe68f68a65cb03388dbe2bf814f351fd17d9210ba8bf35f57fb50c9b201bf40bf593a587c6fc46d0a8be6275c56c4d379c421d469fca93c4b9_0", "is_ignored": false, "lines": "    username = request.form['username']\n    email = request.form['email']\n    conn = get_db_connection()\n    cursor = conn.cursor()\n    # Vulnerable to SQL Injection\n    cursor.execute(f\"INSERT INTO users (username, email) VALUES ('{username}', '{email}')\")", "message": "User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9512, "rule_id": "2ZUbDL", "rv_id": 834453, "url": "https://semgrep.dev/playground/r/A8T3lj2/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute", "version_id": "A8T3lj2"}}, "shortlink": "https://sg.run/qx7y", "source": "https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute", "subcategory": ["vuln"], "technology": ["django"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$CURSOR": {"abstract_content": "cursor", "end": {"col": 11, "line": 62, "offset": 1765}, "propagated_value": {"svalue_abstract_content": "conn.cursor()", "svalue_end": {"col": 27, "line": 60, "offset": 1720}, "svalue_start": {"col": 14, "line": 60, "offset": 1707}}, "start": {"col": 5, "line": 62, "offset": 1759}}, "$DATA": {"abstract_content": "username", "end": {"col": 13, "line": 57, "offset": 1601}, "start": {"col": 5, "line": 57, "offset": 1593}}, "$FUNC": {"abstract_content": "add_user", "end": {"col": 13, "line": 56, "offset": 1585}, "start": {"col": 5, "line": 56, "offset": 1577}}, "$W": {"abstract_content": "form", "end": {"col": 28, "line": 57, "offset": 1616}, "start": {"col": 24, "line": 57, "offset": 1612}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "app_vulnerable.py", "start": {"col": 5, "line": 57, "offset": 1593}}, {"check_id": "python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute", "end": {"col": 92, "line": 62, "offset": 1846}, "extra": {"engine_kind": "OSS", "fingerprint": "7af96cd9c661905172ce48352514c9ad74a551d869d9245f037e83a20bdac18627ee37a67a03df0b9f40ca8433baf0609e48125793741a70d2c1baf5edd11532_0", "is_ignored": false, "lines": "    email = request.form['email']\n    conn = get_db_connection()\n    cursor = conn.cursor()\n    # Vulnerable to SQL Injection\n    cursor.execute(f\"INSERT INTO users (username, email) VALUES ('{username}', '{email}')\")", "message": "User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9512, "rule_id": "2ZUbDL", "rv_id": 834453, "url": "https://semgrep.dev/playground/r/A8T3lj2/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute", "version_id": "A8T3lj2"}}, "shortlink": "https://sg.run/qx7y", "source": "https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute", "subcategory": ["vuln"], "technology": ["django"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$CURSOR": {"abstract_content": "cursor", "end": {"col": 11, "line": 62, "offset": 1765}, "propagated_value": {"svalue_abstract_content": "conn.cursor()", "svalue_end": {"col": 27, "line": 60, "offset": 1720}, "svalue_start": {"col": 14, "line": 60, "offset": 1707}}, "start": {"col": 5, "line": 62, "offset": 1759}}, "$DATA": {"abstract_content": "email", "end": {"col": 10, "line": 58, "offset": 1638}, "start": {"col": 5, "line": 58, "offset": 1633}}, "$FUNC": {"abstract_content": "add_user", "end": {"col": 13, "line": 56, "offset": 1585}, "start": {"col": 5, "line": 56, "offset": 1577}}, "$W": {"abstract_content": "form", "end": {"col": 25, "line": 58, "offset": 1653}, "start": {"col": 21, "line": 58, "offset": 1649}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "app_vulnerable.py", "start": {"col": 5, "line": 58, "offset": 1633}}, {"check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query", "end": {"col": 92, "line": 62, "offset": 1846}, "extra": {"engine_kind": "OSS", "fingerprint": "320997eea31925191797e6599eb74613f22d11c013d0dd345d2eab08335ffffc4e9f3bb6c534c26d76befd6eac7e97225d9fb83428190c636a66dba584a109e9_0", "is_ignored": false, "lines": "    cursor.execute(f\"INSERT INTO users (username, email) VALUES ('{username}', '{email}')\")", "message": "Detected possible formatted SQL query. Use parameterized queries instead.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9637, "rule_id": "3qUP9k", "rv_id": 834610, "url": "https://semgrep.dev/playground/r/RGTKxg9/python.lang.security.audit.formatted-sql-query.formatted-sql-query", "version_id": "RGTKxg9"}}, "shortlink": "https://sg.run/EkWw", "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query", "subcategory": ["audit"], "technology": ["python"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$DB": {"abstract_content": "cursor", "end": {"col": 11, "line": 62, "offset": 1765}, "propagated_value": {"svalue_abstract_content": "conn.cursor()", "svalue_end": {"col": 27, "line": 60, "offset": 1720}, "svalue_start": {"col": 14, "line": 60, "offset": 1707}}, "start": {"col": 5, "line": 62, "offset": 1759}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "app_vulnerable.py", "start": {"col": 5, "line": 62, "offset": 1759}}, {"check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query", "end": {"col": 92, "line": 62, "offset": 1846}, "extra": {"engine_kind": "OSS", "fingerprint": "0ccc33af81cd9e798659bbda6e76b7f00a94dcb11d38932492cdf6c6039c1c034667e2544028f7c0639f3f59cc4d02a8729fb62178dece79d14cdefbe100ec5d_0", "is_ignored": false, "lines": "    cursor.execute(f\"INSERT INTO users (username, email) VALUES ('{username}', '{email}')\")", "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 10563, "rule_id": "oqUz5y", "rv_id": 904977, "url": "https://semgrep.dev/playground/r/2KTdkwe/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query", "version_id": "2KTdkwe"}}, "shortlink": "https://sg.run/2b1L", "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query", "subcategory": ["audit"], "technology": ["sqlalchemy"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$CONNECTION": {"abstract_content": "cursor", "end": {"col": 11, "line": 62, "offset": 1765}, "propagated_value": {"svalue_abstract_content": "conn.cursor()", "svalue_end": {"col": 27, "line": 60, "offset": 1720}, "svalue_start": {"col": 14, "line": 60, "offset": 1707}}, "start": {"col": 5, "line": 62, "offset": 1759}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "app_vulnerable.py", "start": {"col": 5, "line": 62, "offset": 1759}}, {"check_id": "python.django.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 91, "line": 62, "offset": 1845}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "username", "location": {"end": {"col": 13, "line": 57, "offset": 1601}, "path": "app_vulnerable.py", "start": {"col": 5, "line": 57, "offset": 1593}}}], "taint_sink": ["CliLoc", [{"end": {"col": 91, "line": 62, "offset": 1845}, "path": "app_vulnerable.py", "start": {"col": 20, "line": 62, "offset": 1774}}, "f\"INSERT INTO users (username, email) VALUES ('{username}', '{email}')\""]], "taint_source": ["CliLoc", [{"end": {"col": 28, "line": 57, "offset": 1616}, "path": "app_vulnerable.py", "start": {"col": 16, "line": 57, "offset": 1604}}, "request.form"]]}, "engine_kind": "OSS", "fingerprint": "ee382daed221c7489f76f7aceaedc2be0eb86020a7ce44594a70418d9b4f58580563aec1de818e0ca220ffbf6083d89135f9750249f32dae7e654736bb42150a_0", "is_ignored": false, "lines": "    cursor.execute(f\"INSERT INTO users (username, email) VALUES ('{username}', '{email}')\")", "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 14701, "rule_id": "lBU8Ad", "rv_id": 906695, "url": "https://semgrep.dev/playground/r/X0TA1zR/python.django.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "X0TA1zR"}}, "shortlink": "https://sg.run/PbZp", "source": "https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["audit"], "technology": ["django"], "vulnerability_class": ["Mass Assignment"]}, "metavars": {"$1": {"abstract_content": "INSERT", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$ANYTHING": {"abstract_content": "form", "end": {"col": 28, "line": 57, "offset": 1616}, "start": {"col": 24, "line": 57, "offset": 1612}}, "$SQLSTR": {"abstract_content": "INSERT INTO users (username, email) VALUES ('", "end": {"col": 67, "line": 62, "offset": 1821}, "start": {"col": 22, "line": 62, "offset": 1776}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "app_vulnerable.py", "start": {"col": 20, "line": 62, "offset": 1774}}, {"check_id": "python.flask.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 91, "line": 62, "offset": 1845}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "username", "location": {"end": {"col": 13, "line": 57, "offset": 1601}, "path": "app_vulnerable.py", "start": {"col": 5, "line": 57, "offset": 1593}}}], "taint_sink": ["CliLoc", [{"end": {"col": 91, "line": 62, "offset": 1845}, "path": "app_vulnerable.py", "start": {"col": 20, "line": 62, "offset": 1774}}, "f\"INSERT INTO users (username, email) VALUES ('{username}', '{email}')\""]], "taint_source": ["CliLoc", [{"end": {"col": 28, "line": 57, "offset": 1616}, "path": "app_vulnerable.py", "start": {"col": 16, "line": 57, "offset": 1604}}, "request.form"]]}, "engine_kind": "OSS", "fingerprint": "b77cab536bcfb9077dfe4f9de9386f317d0884ca29677588a484b43091f2da8561e13fd0f8801d1f19675d682e8c8d8efe5db5b9572f2bd6c1fd1dc2b424fce6_0", "is_ignored": false, "lines": "    cursor.execute(f\"INSERT INTO users (username, email) VALUES ('{username}', '{email}')\")", "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-704: Incorrect Type Conversion or Cast"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 14702, "rule_id": "YGUDKQ", "rv_id": 834494, "url": "https://semgrep.dev/playground/r/d6TKgrG/python.flask.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "d6TKgrG"}}, "shortlink": "https://sg.run/JxZj", "source": "https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["sqlalchemy", "flask"], "vulnerability_class": ["Improper Validation"]}, "metavars": {"$1": {"abstract_content": "INSERT", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$ANYTHING": {"abstract_content": "form", "end": {"col": 28, "line": 57, "offset": 1616}, "start": {"col": 24, "line": 57, "offset": 1612}}, "$SQLSTR": {"abstract_content": "INSERT INTO users (username, email) VALUES ('", "end": {"col": 67, "line": 62, "offset": 1821}, "start": {"col": 22, "line": 62, "offset": 1776}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "app_vulnerable.py", "start": {"col": 20, "line": 62, "offset": 1774}}, {"check_id": "python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute", "end": {"col": 75, "line": 73, "offset": 2161}, "extra": {"engine_kind": "OSS", "fingerprint": "207727df40d741c00409f89ce140870211e9728efbb15f6b4ca51c987d2ff5180736070b5cf06c74ecb2344f74601b80364fe2eb6b3a1014687a762a3b66c292_0", "is_ignored": false, "lines": "    query = request.args.get('q', '')\n    conn = get_db_connection()\n    cursor = conn.cursor()\n    # Vulnerable to SQL Injection\n    cursor.execute(f\"SELECT * FROM users WHERE username LIKE '%{query}%'\")", "message": "User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9512, "rule_id": "2ZUbDL", "rv_id": 834453, "url": "https://semgrep.dev/playground/r/A8T3lj2/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute", "version_id": "A8T3lj2"}}, "shortlink": "https://sg.run/qx7y", "source": "https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute", "subcategory": ["vuln"], "technology": ["django"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$CURSOR": {"abstract_content": "cursor", "end": {"col": 11, "line": 73, "offset": 2097}, "propagated_value": {"svalue_abstract_content": "conn.cursor()", "svalue_end": {"col": 27, "line": 71, "offset": 2052}, "svalue_start": {"col": 14, "line": 71, "offset": 2039}}, "start": {"col": 5, "line": 73, "offset": 2091}}, "$DATA": {"abstract_content": "query", "end": {"col": 10, "line": 69, "offset": 1966}, "start": {"col": 5, "line": 69, "offset": 1961}}, "$FUNC": {"abstract_content": "search", "end": {"col": 11, "line": 68, "offset": 1953}, "start": {"col": 5, "line": 68, "offset": 1947}}, "$W": {"abstract_content": "args", "end": {"col": 25, "line": 69, "offset": 1981}, "start": {"col": 21, "line": 69, "offset": 1977}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "app_vulnerable.py", "start": {"col": 5, "line": 69, "offset": 1961}}, {"check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query", "end": {"col": 75, "line": 73, "offset": 2161}, "extra": {"engine_kind": "OSS", "fingerprint": "320997eea31925191797e6599eb74613f22d11c013d0dd345d2eab08335ffffc4e9f3bb6c534c26d76befd6eac7e97225d9fb83428190c636a66dba584a109e9_1", "is_ignored": false, "lines": "    cursor.execute(f\"SELECT * FROM users WHERE username LIKE '%{query}%'\")", "message": "Detected possible formatted SQL query. Use parameterized queries instead.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9637, "rule_id": "3qUP9k", "rv_id": 834610, "url": "https://semgrep.dev/playground/r/RGTKxg9/python.lang.security.audit.formatted-sql-query.formatted-sql-query", "version_id": "RGTKxg9"}}, "shortlink": "https://sg.run/EkWw", "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query", "subcategory": ["audit"], "technology": ["python"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$DB": {"abstract_content": "cursor", "end": {"col": 11, "line": 73, "offset": 2097}, "propagated_value": {"svalue_abstract_content": "conn.cursor()", "svalue_end": {"col": 27, "line": 71, "offset": 2052}, "svalue_start": {"col": 14, "line": 71, "offset": 2039}}, "start": {"col": 5, "line": 73, "offset": 2091}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "app_vulnerable.py", "start": {"col": 5, "line": 73, "offset": 2091}}, {"check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query", "end": {"col": 75, "line": 73, "offset": 2161}, "extra": {"engine_kind": "OSS", "fingerprint": "0ccc33af81cd9e798659bbda6e76b7f00a94dcb11d38932492cdf6c6039c1c034667e2544028f7c0639f3f59cc4d02a8729fb62178dece79d14cdefbe100ec5d_1", "is_ignored": false, "lines": "    cursor.execute(f\"SELECT * FROM users WHERE username LIKE '%{query}%'\")", "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 10563, "rule_id": "oqUz5y", "rv_id": 904977, "url": "https://semgrep.dev/playground/r/2KTdkwe/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query", "version_id": "2KTdkwe"}}, "shortlink": "https://sg.run/2b1L", "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query", "subcategory": ["audit"], "technology": ["sqlalchemy"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$CONNECTION": {"abstract_content": "cursor", "end": {"col": 11, "line": 73, "offset": 2097}, "propagated_value": {"svalue_abstract_content": "conn.cursor()", "svalue_end": {"col": 27, "line": 71, "offset": 2052}, "svalue_start": {"col": 14, "line": 71, "offset": 2039}}, "start": {"col": 5, "line": 73, "offset": 2091}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "app_vulnerable.py", "start": {"col": 5, "line": 73, "offset": 2091}}, {"check_id": "python.django.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 74, "line": 73, "offset": 2160}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "query", "location": {"end": {"col": 10, "line": 69, "offset": 1966}, "path": "app_vulnerable.py", "start": {"col": 5, "line": 69, "offset": 1961}}}], "taint_sink": ["CliLoc", [{"end": {"col": 74, "line": 73, "offset": 2160}, "path": "app_vulnerable.py", "start": {"col": 20, "line": 73, "offset": 2106}}, "f\"SELECT * FROM users WHERE username LIKE '%{query}%'\""]], "taint_source": ["CliLoc", [{"end": {"col": 25, "line": 69, "offset": 1981}, "path": "app_vulnerable.py", "start": {"col": 13, "line": 69, "offset": 1969}}, "request.args"]]}, "engine_kind": "OSS", "fingerprint": "51853e4235b226b0636c57e865a2d158effc5203043d09ba10ef873c60f14694ae76127e6e989fbfc7833606d0e5f7ae1145789fc663cd868702549f96f6a85b_0", "is_ignored": false, "lines": "    cursor.execute(f\"SELECT * FROM users WHERE username LIKE '%{query}%'\")", "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 14701, "rule_id": "lBU8Ad", "rv_id": 906695, "url": "https://semgrep.dev/playground/r/X0TA1zR/python.django.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "X0TA1zR"}}, "shortlink": "https://sg.run/PbZp", "source": "https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["audit"], "technology": ["django"], "vulnerability_class": ["Mass Assignment"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$ANYTHING": {"abstract_content": "args", "end": {"col": 25, "line": 69, "offset": 1981}, "start": {"col": 21, "line": 69, "offset": 1977}}, "$SQLSTR": {"abstract_content": "SELECT * FROM users WHERE username LIKE '%", "end": {"col": 64, "line": 73, "offset": 2150}, "start": {"col": 22, "line": 73, "offset": 2108}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "app_vulnerable.py", "start": {"col": 20, "line": 73, "offset": 2106}}, {"check_id": "python.flask.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 74, "line": 73, "offset": 2160}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "query", "location": {"end": {"col": 10, "line": 69, "offset": 1966}, "path": "app_vulnerable.py", "start": {"col": 5, "line": 69, "offset": 1961}}}], "taint_sink": ["CliLoc", [{"end": {"col": 74, "line": 73, "offset": 2160}, "path": "app_vulnerable.py", "start": {"col": 20, "line": 73, "offset": 2106}}, "f\"SELECT * FROM users WHERE username LIKE '%{query}%'\""]], "taint_source": ["CliLoc", [{"end": {"col": 25, "line": 69, "offset": 1981}, "path": "app_vulnerable.py", "start": {"col": 13, "line": 69, "offset": 1969}}, "request.args"]]}, "engine_kind": "OSS", "fingerprint": "ce9c434ca6be1cf70b6f4b47725c7c737ed85b7c9a9ef08e28d84e10e2367db5aa5c70f48998ceff6dd7dfcaed084439f9f37ca04e8a62e49775c692614cc0bd_0", "is_ignored": false, "lines": "    cursor.execute(f\"SELECT * FROM users WHERE username LIKE '%{query}%'\")", "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-704: Incorrect Type Conversion or Cast"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 14702, "rule_id": "YGUDKQ", "rv_id": 834494, "url": "https://semgrep.dev/playground/r/d6TKgrG/python.flask.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "d6TKgrG"}}, "shortlink": "https://sg.run/JxZj", "source": "https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["sqlalchemy", "flask"], "vulnerability_class": ["Improper Validation"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$ANYTHING": {"abstract_content": "args", "end": {"col": 25, "line": 69, "offset": 1981}, "start": {"col": 21, "line": 69, "offset": 1977}}, "$SQLSTR": {"abstract_content": "SELECT * FROM users WHERE username LIKE '%", "end": {"col": 64, "line": 73, "offset": 2150}, "start": {"col": 22, "line": 73, "offset": 2108}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "app_vulnerable.py", "start": {"col": 20, "line": 73, "offset": 2106}}, {"check_id": "python.flask.security.audit.render-template-string.render-template-string", "end": {"col": 22, "line": 84, "offset": 2467}, "extra": {"engine_kind": "OSS", "fingerprint": "ae48ff0c8a35e55df8c26511caab7f6f778e9a697ed25952de7443d975df0b5d4d174b549f6ee0bdd3fbc2eb6a8226fde01e662e2bdcc1d7b4135ff6b4ce9179_1", "is_ignored": false, "lines": "    return render_template_string('''\n        <h1>Search Results</h1>\n        <ul>\n            {% for user in users %}\n                <li>{{ user[1] }} - {{ user[2] }}</li>\n            {% endfor %}\n        </ul>\n    ''', users=users)", "message": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9540, "rule_id": "5rUOv1", "rv_id": 834480, "url": "https://semgrep.dev/playground/r/X0T5KQJ/python.flask.security.audit.render-template-string.render-template-string", "version_id": "X0T5KQJ"}}, "shortlink": "https://sg.run/8yjE", "source": "https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string", "subcategory": ["audit"], "technology": ["flask"], "vulnerability_class": ["Code Injection"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "app_vulnerable.py", "start": {"col": 12, "line": 77, "offset": 2244}}, {"check_id": "python.django.security.injection.command.command-injection-os-system.command-injection-os-system", "end": {"col": 19, "line": 118, "offset": 3606}, "extra": {"engine_kind": "OSS", "fingerprint": "60ed83b9bed271e9c9d75bb91695bd3a17a213cf69f95602a977341edce576569397d3a949a66ac1d207f1136822c8d8b3d9b2671de23a89c0de7396c2ebcd28_0", "is_ignored": false, "lines": "    cmd = request.args.get('cmd', '')\n    # Vulnerable to Command Injection\n    os.system(cmd)", "message": "Request data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection for more information.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/Command_Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9504, "rule_id": "KxUbp2", "rv_id": 834436, "url": "https://semgrep.dev/playground/r/vdTOQr3/python.django.security.injection.command.command-injection-os-system.command-injection-os-system", "version_id": "vdTOQr3"}}, "shortlink": "https://sg.run/Gen2", "source": "https://semgrep.dev/r/python.django.security.injection.command.command-injection-os-system.command-injection-os-system", "subcategory": ["vuln"], "technology": ["django"], "vulnerability_class": ["Command Injection"]}, "metavars": {"$DATA": {"abstract_content": "cmd", "end": {"col": 8, "line": 116, "offset": 3519}, "start": {"col": 5, "line": 116, "offset": 3516}}, "$FUNC": {"abstract_content": "execute", "end": {"col": 12, "line": 115, "offset": 3508}, "start": {"col": 5, "line": 115, "offset": 3501}}, "$W": {"abstract_content": "args", "end": {"col": 23, "line": 116, "offset": 3534}, "start": {"col": 19, "line": 116, "offset": 3530}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "app_vulnerable.py", "start": {"col": 5, "line": 116, "offset": 3516}}, {"check_id": "python.flask.security.injection.os-system-injection.os-system-injection", "end": {"col": 19, "line": 118, "offset": 3606}, "extra": {"engine_kind": "OSS", "fingerprint": "2083b14bd8df72c4a09e100414413ea3e77911c7347f2407efd8883b236817a3added0c0e922206e96b9092076e334363a50b9e7b72f5d9d7d0cb12173c8cd01_0", "is_ignored": false, "lines": "    os.system(cmd)", "message": "User data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/Command_Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9544, "rule_id": "BYUN99", "rv_id": 834489, "url": "https://semgrep.dev/playground/r/w8TAb9r/python.flask.security.injection.os-system-injection.os-system-injection", "version_id": "w8TAb9r"}}, "shortlink": "https://sg.run/4xzz", "source": "https://semgrep.dev/r/python.flask.security.injection.os-system-injection.os-system-injection", "subcategory": ["audit"], "technology": ["flask"], "vulnerability_class": ["Command Injection"]}, "metavars": {"$INTERM": {"abstract_content": "cmd", "end": {"col": 8, "line": 116, "offset": 3519}, "start": {"col": 5, "line": 116, "offset": 3516}}, "$W": {"abstract_content": "args", "end": {"col": 23, "line": 116, "offset": 3534}, "start": {"col": 19, "line": 116, "offset": 3530}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "app_vulnerable.py", "start": {"col": 5, "line": 118, "offset": 3592}}, {"check_id": "python.lang.security.dangerous-system-call.dangerous-system-call", "end": {"col": 19, "line": 118, "offset": 3606}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "cmd", "location": {"end": {"col": 8, "line": 116, "offset": 3519}, "path": "app_vulnerable.py", "start": {"col": 5, "line": 116, "offset": 3516}}}], "taint_sink": ["CliLoc", [{"end": {"col": 19, "line": 118, "offset": 3606}, "path": "app_vulnerable.py", "start": {"col": 5, "line": 118, "offset": 3592}}, "os.system(cmd)"]], "taint_source": ["CliLoc", [{"end": {"col": 38, "line": 116, "offset": 3549}, "path": "app_vulnerable.py", "start": {"col": 11, "line": 116, "offset": 3522}}, "request.args.get('cmd', '')"]]}, "engine_kind": "OSS", "fingerprint": "571d5e78aae5028980d8becb8632d0eab904e80e888a0e58faeefab0cb617e6d411da19390996265374e7ca630f7cc4b3a810e16a3c4a593a222766059d8ab0b_0", "is_ignored": false, "lines": "    os.system(cmd)", "message": "Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.", "metadata": {"asvs": {"control_id": "5.2.4 Dyanmic Code Execution Features", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements", "section": "V5: Validation, Sanitization and Encoding Verification Requirements", "version": "4"}, "category": "security", "confidence": "MEDIUM", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 27272, "rule_id": "5rUoP1", "rv_id": 834660, "url": "https://semgrep.dev/playground/r/K3TrL49/python.lang.security.dangerous-system-call.dangerous-system-call", "version_id": "K3TrL49"}}, "shortlink": "https://sg.run/k0W7", "source": "https://semgrep.dev/r/python.lang.security.dangerous-system-call.dangerous-system-call", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html", "subcategory": ["vuln"], "technology": ["python"], "vulnerability_class": ["Command Injection"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "app_vulnerable.py", "start": {"col": 5, "line": 118, "offset": 3592}}, {"check_id": "python.flask.security.insecure-deserialization.insecure-deserialization", "end": {"col": 29, "line": 127, "offset": 3842}, "extra": {"engine_kind": "OSS", "fingerprint": "a30a4a346631ee6d69e52fe0bfe288f7e4f4bb529b3a0fdbbda2bd8073880e6e280ed551aa549494f9a32ce5574dd2e770ea0a24155a2f3faf3f938c0be06f77_0", "is_ignored": false, "lines": "    obj = pickle.loads(data)", "message": "Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.python.org/3/library/pickle.html"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9527, "rule_id": "d8UjBO", "rv_id": 834498, "url": "https://semgrep.dev/playground/r/7ZTxRgA/python.flask.security.insecure-deserialization.insecure-deserialization", "version_id": "7ZTxRgA"}}, "shortlink": "https://sg.run/N45z", "source": "https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization", "subcategory": ["audit"], "technology": ["flask"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {"$FUNC": {"abstract_content": "loads", "end": {"col": 23, "line": 127, "offset": 3836}, "start": {"col": 18, "line": 127, "offset": 3831}}, "$X": {"abstract_content": "deserialize", "end": {"col": 16, "line": 122, "offset": 3681}, "start": {"col": 5, "line": 122, "offset": 3670}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "app_vulnerable.py", "start": {"col": 11, "line": 127, "offset": 3824}}, {"check_id": "python.lang.security.deserialization.pickle.avoid-pickle", "end": {"col": 29, "line": 127, "offset": 3842}, "extra": {"engine_kind": "OSS", "fingerprint": "518038f9fe00e6ac2854f75ed8d10dd454dbe308787976503ba561193cc29edaa66382d176ade24b491640d03a56cc376721ee7f5de9629de92fb5be2e4b1d61_0", "is_ignored": false, "lines": "    obj = pickle.loads(data)", "message": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.python.org/3/library/pickle.html"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9675, "rule_id": "EwU2BJ", "rv_id": 928301, "url": "https://semgrep.dev/playground/r/qkTpk98/python.lang.security.deserialization.pickle.avoid-pickle", "version_id": "qkTpk98"}}, "shortlink": "https://sg.run/OPwB", "source": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle", "subcategory": ["audit"], "technology": ["python"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {"$FUNC": {"abstract_content": "loads", "end": {"col": 23, "line": 127, "offset": 3836}, "start": {"col": 18, "line": 127, "offset": 3831}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "app_vulnerable.py", "start": {"col": 11, "line": 127, "offset": 3824}}, {"check_id": "python.flask.security.audit.directly-returned-format-string.directly-returned-format-string", "end": {"col": 41, "line": 128, "offset": 3883}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 9, "line": 123, "offset": 3693}, "path": "app_vulnerable.py", "start": {"col": 5, "line": 123, "offset": 3689}}}, {"content": "obj", "location": {"end": {"col": 8, "line": 127, "offset": 3821}, "path": "app_vulnerable.py", "start": {"col": 5, "line": 127, "offset": 3818}}}], "taint_sink": ["CliLoc", [{"end": {"col": 41, "line": 128, "offset": 3883}, "path": "app_vulnerable.py", "start": {"col": 5, "line": 128, "offset": 3847}}, "return f'Deserialized object: {obj}'"]], "taint_source": ["CliLoc", [{"end": {"col": 40, "line": 123, "offset": 3724}, "path": "app_vulnerable.py", "start": {"col": 12, "line": 123, "offset": 3696}}, "request.args.get('data', '')"]]}, "engine_kind": "OSS", "fingerprint": "89e9c84506d4e91f831149409f54851e9a87c86a16e869d702fb2140705e399dd1cfef468cf2cb252cb61afc121d8d3d0dfb9634e93c047695ac2221378e1ef9_0", "is_ignored": false, "lines": "    return f'Deserialized object: {obj}'", "message": "Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9535, "rule_id": "QrUz49", "rv_id": 834474, "url": "https://semgrep.dev/playground/r/YDTlbpZ/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string", "version_id": "YDTlbpZ"}}, "shortlink": "https://sg.run/Zv6o", "source": "https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string", "subcategory": ["vuln"], "technology": ["flask"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$FUNC": {"abstract_content": "args", "end": {"col": 24, "line": 123, "offset": 3708}, "start": {"col": 20, "line": 123, "offset": 3704}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "app_vulnerable.py", "start": {"col": 5, "line": 128, "offset": 3847}}], "skipped_rules": [], "version": "1.96.0"}
