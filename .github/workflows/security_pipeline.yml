name: DevSecOps Security Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security_scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Step 3: Install dependencies and security tools
      - name: Install Dependencies and Tools
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Install security tools
          pip install bandit pylint semgrep
          # Install jq for JSON processing
          sudo apt-get update
          sudo apt-get install -y jq

      # Step 4: Run Flake8 Linting
      - name: Run Flake8 Linting
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true

      # Step 5: Static Code Analysis with Bandit
      - name: Run Bandit Security Scan
        run: |
          bandit -r . -f json -o bandit-report.json || true
        continue-on-error: true

      # Step 6: Static Analysis with Semgrep
      - name: Run Semgrep Security Scan
        run: |
          semgrep --config=auto --json . > semgrep-report.json || true
        continue-on-error: true

      # Step 7: Code Quality Analysis with Pylint
      - name: Run Pylint
        run: |
          pylint **/*.py --output-format=json:pylint-report.json || true

      # Step 8: Fail Workflow on High Severity Vulnerabilities
      - name: Fail on High Severity Vulnerabilities
        run: |
          # Bandit
          CRITICAL_BANDIT=$(jq '[.results[] | select(.issue_severity=="HIGH" or .issue_severity=="CRITICAL")] | length' bandit-report.json)

          # Semgrep
          CRITICAL_SEMGREP=$(jq '[.results[] | select(.severity=="ERROR" or .severity=="WARNING")] | length' semgrep-report.json)

          echo "Critical Bandit Issues: $CRITICAL_BANDIT"
          echo "Critical Semgrep Findings: $CRITICAL_SEMGREP"

          if [ "$CRITICAL_BANDIT" -gt 0 ] || [ "$CRITICAL_SEMGREP" -gt 0 ]; then
            echo "Critical vulnerabilities found. Failing the build."
            exit 1
          fi
        shell: bash

      # Step 9: Collect Reports
      - name: Upload Bandit Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.json

      - name: Upload Semgrep Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: semgrep-report
          path: semgrep-report.json

      - name: Upload Pylint Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: pylint-report
          path: pylint-report.json

      # Step 10: Generate Summary and Comment on PR
      - name: Generate and Post Security Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const banditReportPath = 'bandit-report.json';
            const semgrepReportPath = 'semgrep-report.json';
            const pylintReportPath = 'pylint-report.json';

            // Function to safely parse JSON
            const parseJson = (path) => {
              if (fs.existsSync(path)) {
                const data = fs.readFileSync(path, 'utf8');
                try {
                  return JSON.parse(data);
                } catch (error) {
                  console.error(`Error parsing ${path}:`, error);
                  return null;
                }
              }
              return null;
            };

            // Read Reports
            let banditReport = parseJson(banditReportPath) || { results: [] };
            let semgrepReport = parseJson(semgrepReportPath) || { results: [] };
            let pylintReport = parseJson(pylintReportPath) || [];

            // Initialize summary
            let summary = "## 🛡️ Security Scan Report\n\n";

            // Bandit Results
            summary += `### 🔒 Bandit Findings: ${banditReport.results.length} issue(s) found\n\n`;
            if (banditReport.results.length > 0) {
              summary += "| Severity | Issue | File | Line |\n| --- | --- | --- | --- |\n";
              banditReport.results.forEach(issue => {
                const severity = issue.issue_severity || 'UNKNOWN';
                const issueText = (issue.issue_text || '').replace(/\|/g, '\\|');
                const filePath = issue.filename || 'N/A';
                const lineNumber = issue.line_number || 'N/A';
                summary += `| ${severity} | ${issueText} | ${filePath} | ${lineNumber} |\n`;
              });
            } else {
              summary += "No issues found by Bandit.\n";
            }

            summary += "\n";

            // Semgrep Results
            summary += `### 🔍 Semgrep Findings: ${semgrepReport.results.length} issue(s) found\n\n`;
            if (semgrepReport.results.length > 0) {
              summary += "| Severity | Message | File | Line |\n| --- | --- | --- | --- |\n";
              semgrepReport.results.forEach(issue => {
                const severity = issue.severity || (issue.extra && issue.extra.severity) || 'UNKNOWN';
                const message = (issue.message || (issue.extra && issue.extra.message) || '').replace(/\|/g, '\\|');
                const filePath = issue.path || issue.filename || 'N/A';
                const lineNumber = (issue.start && issue.start.line) || 'N/A';
                summary += `| ${severity} | ${message} | ${filePath} | ${lineNumber} |\n`;
              });
            } else {
              summary += "No issues found by Semgrep.\n";
            }

            summary += "\n";

            // Pylint Results
            summary += `### 🐍 Pylint Findings: ${pylintReport.length} issue(s) found\n\n`;
            if (pylintReport.length > 0) {
              summary += "| Type | Message | Module | Line |\n| --- | --- | --- | --- |\n";
              pylintReport.forEach(issue => {
                const issueType = issue.type || 'UNKNOWN';
                const message = (issue.message || '').replace(/\|/g, '\\|');
                const module = issue.module || 'N/A';
                const lineNumber = issue.line || 'N/A';
                summary += `| ${issueType} | ${message} | ${module} | ${lineNumber} |\n`;
              });
            } else {
              summary += "No issues found by Pylint.\n";
            }

            // Post the summary as a comment
            const commentBody = summary;
            const pr = context.payload.pull_request;
            const issue_number = pr.number;

            github.rest.issues.createComment({
              ...context.repo,
              issue_number: issue_number,
              body: commentBody
            });
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
